name: Update Rules

on:
  schedule:
    # 每天北京时间上午9点 (UTC+8) => UTC时间是凌晨1点
    - cron: '0 1 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: release
        fetch-depth: 0  # 添加此行以获取完整的git历史
        
    - name: Set up Python
      uses: actions/setup-python@v5  # 更新到 v5
      with:
        python-version: '3.12'  # 指定具体的Python版本
        cache: 'pip'  # 启用pip缓存
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Download and process rules
      env:
        MAX_RETRIES: 3  # 添加重试次数环境变量
      run: |
        cat << 'EOF' > process.py
        import requests
        import sys
        import os
        from time import sleep

        def download_with_retry(url, max_retries=int(os.getenv('MAX_RETRIES', 3))):
            for attempt in range(max_retries):
                try:
                    response = requests.get(url, timeout=30)
                    response.raise_for_status()
                    return response.text
                except Exception as e:
                    if attempt == max_retries - 1:
                        raise
                    print(f"Attempt {attempt + 1} failed: {str(e)}")
                    sleep(2 ** attempt)  # 指数退避

        def process_file(url, remove_duplicates=False, do_sort=True):
            content = download_with_retry(url)
            lines = content.splitlines()
            # 过滤掉注释行和特定字符串
            filtered_lines = [line for line in lines 
                             if not line.startswith("#") 
                             and "this_ruleset_is_made_by_sukkaw.ruleset.skk.moe" not in line
                             and line.strip()]
            if remove_duplicates:
                return sorted(set(filtered_lines))
            elif do_sort:
                return sorted(filtered_lines)
            return filtered_lines

        def main():
            try:
                # URLs
                urls = {
                    'cn': "https://ruleset.skk.moe/List/non_ip/apple_cn.conf",
                    'cdn': "https://ruleset.skk.moe/List/non_ip/apple_cdn.conf",
                    'services': "https://ruleset.skk.moe/List/non_ip/apple_services.conf",
                    'ai': "https://ruleset.skk.moe/List/non_ip/ai.conf",
                    'telegram_domain': "https://ruleset.skk.moe/List/non_ip/telegram.conf",
                    'telegram_ip': "https://ruleset.skk.moe/List/ip/telegram.conf"
                }

                # 处理 apple_cn 和 apple_cdn
                cn_rules = process_file(urls['cn'], remove_duplicates=True)
                cdn_rules = process_file(urls['cdn'], remove_duplicates=True)
                combined_rules = sorted(set(cn_rules + cdn_rules))

                with open("apple_cn.conf", "w", encoding='utf-8') as f:
                    f.write("\n".join(combined_rules) + "\n")

                # 处理其他规则
                files_config = {
                    'apple_services.conf': (urls['services'], False, True),
                    'ai.conf': (urls['ai'], False, False),
                    'telegram.conf': ([urls['telegram_domain'], urls['telegram_ip']], False, False)
                }

                for output_file, config in files_config.items():
                    if isinstance(config[0], list):
                        # 合并多个规则文件
                        rules = []
                        for url in config[0]:
                            rules.extend(process_file(url, config[1], config[2]))
                    else:
                        rules = process_file(config[0], config[1], config[2])

                    with open(output_file, "w", encoding='utf-8') as f:
                        f.write("\n".join(rules) + "\n")

                print("Rules processing completed successfully!")
                return 0

            except Exception as e:
                print(f"Error occurred: {str(e)}", file=sys.stderr)
                return 1

        if __name__ == "__main__":
            sys.exit(main())
        EOF
        
        python process.py

    - name: Generate YAML files
      run: |
        cat << 'EOF' > generate_yaml.py
        import sys

        def generate_yaml(conf_file, yaml_file):
            try:
                with open(conf_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                with open(yaml_file, 'w', encoding='utf-8') as f:
                    f.write("payload:\n")
                    for line in lines:
                        line = line.strip()
                        if line:
                            f.write(f"  - {line}\n")
                return True
            except Exception as e:
                print(f"Error processing {conf_file}: {str(e)}", file=sys.stderr)
                return False

        def main():
            files = [
                ("apple_cn.conf", "apple_cn.yaml"),
                ("apple_services.conf", "apple_services.yaml"),
                ("ai.conf", "ai.yaml"),
                ("telegram.conf", "telegram.yaml")
            ]

            success = True
            for conf_file, yaml_file in files:
                if not generate_yaml(conf_file, yaml_file):
                    success = False

            if success:
                print("YAML files generated successfully!")
                return 0
            return 1

        if __name__ == "__main__":
            sys.exit(main())
        EOF
        
        python generate_yaml.py

    - name: Config Git
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        
    - name: Commit and Push
      run: |
        files_to_check=(
          "apple_cn.conf"
          "apple_services.conf"
          "apple_cn.yaml"
          "apple_services.yaml"
          "ai.conf"
          "ai.yaml"
          "telegram.conf"
          "telegram.yaml"
        )
        
        # 获取北京时间
        current_time=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
        
        # 检查所有文件是否存在
        for file in "${files_to_check[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Error: $file does not exist"
            exit 1
          fi
        done
        
        # 添加文件
        git add "${files_to_check[@]}"

        # 检查是否有更改
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Update rules: ${current_time}"
          git push origin release
        fi
